{"version":3,"file":"static/js/257.6fdd003d.chunk.js","mappings":"gPACA,GAAgB,MAAQ,2BAA2B,MAAQ,2BAA2B,OAAS,4BAA4B,OAAS,6B,oBCDvHA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACtBC,EAAyB,SAAAH,GAAK,OAAIA,EAAMI,MAAV,EAC9BC,EAAkB,SAAAL,GAAK,OAAIA,EAAMC,SAASK,SAAnB,E,UCK9BC,EAAe,CACnBC,KAAM,GACNC,OAAQ,IAwEV,EAtEoB,WAClB,OAA0BC,EAAAA,EAAAA,UAASH,GAAnC,eAAOP,EAAP,KAAcW,EAAd,KACMV,GAAWW,EAAAA,EAAAA,IAAYb,GAEvBc,GAAYC,EAAAA,EAAAA,MACZC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAAAC,GACnB,MAAwBA,EAAIC,OAApBX,EAAR,EAAQA,KAAMY,EAAd,EAAcA,MAEdT,GAAS,SAAAU,GACP,OAAO,kBACFA,GADL,cAEGb,EAAOY,GAEX,GACF,EAgBD,OACE,kBAAME,UAAWC,EAAAA,KAAaC,SAfX,SAAAN,GACnBA,EAAIO,iBACJ,IAAQjB,EAAiBR,EAAjBQ,KAAMC,EAAWT,EAAXS,OAERiB,EAAUR,EAAIC,OAAOQ,SAASnB,KAAKY,MAEzCnB,EAAS2B,MAAK,SAAAC,GAAI,OAAIA,EAAKrB,KAAKsB,gBAAkBJ,EAAQI,aAAxC,IACdC,MAAM,GAAD,OAAIL,EAAJ,4BACLX,GAASiB,EAAAA,EAAAA,IAAW,CAAExB,KAAAA,EAAMC,OAAAA,MAC9BsB,MAAM,GAAD,OAAIL,EAAJ,iCAEPf,EAASJ,EACV,EAGC,WACE,4BACE,mBAAOe,UAAWC,EAAAA,MAAcU,QAASpB,EAAzC,kBAEE,kBACEqB,SAAUjB,EACVG,MAAOpB,EAAMQ,KACbc,UAAWC,EAAAA,MACXY,KAAK,OACL3B,KAAK,OACL4B,GAAIvB,EACJwB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,mBAAOjB,UAAWC,EAAAA,MAAcU,QAASpB,EAAzC,oBAEE,kBACEqB,SAAUjB,EACVG,MAAOpB,EAAMS,OACba,UAAWC,EAAAA,MACXY,KAAK,MACL3B,KAAK,SACL6B,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,WAId,mBAAQjB,UAAWC,EAAAA,OAAeY,KAAK,SAAvC,2BAKL,E,oBC7EYK,EAAS,WACpB,OACE,SAAC,KAAD,CACFC,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,oBACVC,OAAO,IACPC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GAGV,ECdD,EAAuB,0BAAvB,EAAwD,0BAAxD,EAA2F,4BCkE3F,MAxDA,WACE,IAAMjC,GAAWC,EAAAA,EAAAA,MACXiC,GAAcrC,EAAAA,EAAAA,IAAYT,GAC1BG,GAAYM,EAAAA,EAAAA,IAAYP,GACxBJ,GAAWW,EAAAA,EAAAA,IAAYb,IAE7BmD,EAAAA,EAAAA,YAAU,WACRnC,GAASoC,EAAAA,EAAAA,MACV,GAAE,CAACpC,IAEJ,IAAMqC,GAAiB,OAAInD,GAAUoD,MAAK,SAACC,EAAGC,GAAJ,OACxCD,EAAE9C,KAAKgD,cAAcD,EAAE/C,KADiB,IAIpCiD,EAAmB,WACvB,OAAKR,EAGEG,EAAehD,QAAO,SAAAsD,GAAO,OAClCA,EAAQlD,KAAKsB,cAAc6B,SAASV,EAAYnB,cADd,IAF3BsB,CAKV,EAED,OACE,0BACG9C,IAAa,SAACkC,EAAD,IACiB,IAA9BiB,IAAmBG,SAAgB,0DACnCH,IAAmBI,KAAI,YAA2B,IAAxBzB,EAAuB,EAAvBA,GAAI5B,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACnC,OACE,gBAAaa,UAAWC,EAAxB,WACE,eAAGD,UAAWC,EAAd,UACGf,EADH,MACYC,MAEZ,mBACEa,UAAWC,EACXY,KAAK,SACL2B,QAAS,kBACP/C,GAASgD,EAAAA,EAAAA,IAAc3B,IACpB4B,SACAC,MAAK,YAAmB,IAAhBzD,EAAe,EAAfA,KAAe,EAAT4B,GACbL,MAAM,GAAD,OAAIvB,EAAJ,8BACN,IACA0D,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACb,GARI,EAHX,sBAJO/B,EAsBZ,MAGN,EChED,EAAuB,qBAAvB,EAAoD,sB,UCsBpD,MAlBA,WACE,IAAMrB,GAAWC,EAAAA,EAAAA,MACXsD,GAAiB1D,EAAAA,EAAAA,IAAYT,GAEnC,OACE,iCACE,cAAGmB,UAAWC,EAAd,oCACA,kBACED,UAAWC,EACXY,KAAK,OACL3B,KAAK,SACLY,MAAOkD,EACPpC,SAAU,SAAAqC,GAAC,OAAIxD,GAASyD,EAAAA,EAAAA,GAAUD,EAAEpD,OAAOC,OAAhC,MAIlB,ECJD,EAbkB,WAChB,OACE,4BACE,mBACA,SAAC,EAAD,KACA,mBACA,SAAC,EAAD,KACA,mBACA,SAAC,EAAD,MAGL,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Loader/Loader.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/PhoneBook.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"ContactForm_title__jZguf\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\",\"active\":\"ContactForm_active__JbGHE\"};","export const selectContacts = state => state.contacts.items;\nexport const selectFilteredContacts = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;","import { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport styles from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst initialState = {\n  name: '',\n  number: '',\n};\nconst ContactForm = () => {\n  const [state, setState] = useState(initialState);\n  const contacts = useSelector(selectContacts);\n\n  const contactId = nanoid();\n  const dispatch = useDispatch();\n\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n\n    setState(prev => {\n      return {\n        ...prev,\n        [name]: value,\n      };\n    });\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const { name, number } = state;\n\n    const newName = evt.target.elements.name.value;\n\n    contacts.find(item => item.name.toLowerCase() === newName.toLowerCase())\n      ? alert(`${newName} is already in contacts`)\n      : dispatch(addContact({ name, number })) &&\n      alert(`${newName} has added to your phonebook`);\n        \n    setState(initialState);\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <div>\n        <label className={styles.title} htmlFor={contactId}>\n          Name\n          <input\n            onChange={handleChange}\n            value={state.name}\n            className={styles.input}\n            type=\"text\"\n            name=\"name\"\n            id={contactId}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label className={styles.title} htmlFor={contactId}>\n          Number\n          <input\n            onChange={handleChange}\n            value={state.number}\n            className={styles.input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n      </div>\n      <button className={styles.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;","import { TailSpin } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <TailSpin\n  height=\"80\"\n  width=\"80\"\n  color=\"#4fa94d\"\n  ariaLabel=\"tail-spin-loading\"\n  radius=\"1\"\n  wrapperStyle={{}}\n  wrapperClass=\"\"\n  visible={true}\n/>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"button\":\"ContactList_button__7kL4l\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  selectFilteredContacts,\n  selectContacts,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { deleteContact, fetchContacts } from '../../redux/contacts/operations';\nimport styles from './ContactList.module.css';\n\nfunction ContactList() {\n  const dispatch = useDispatch();\n  const filterState = useSelector(selectFilteredContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const sortedContacts = [...contacts].sort((a, b) =>\n    a.name.localeCompare(b.name)\n  );\n\n  const filteredContacts = () => {\n    if (!filterState) {\n      return sortedContacts;\n    }\n    return sortedContacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterState.toLowerCase())\n    );\n  };\n\n  return (\n    <ul>\n      {isLoading && <Loader />}\n      {filteredContacts().length === 0 && <p>You haven't found any contacts</p>}\n      {filteredContacts().map(({ id, name, number }) => {\n        return (\n          <li key={id} className={styles.item}>\n            <p className={styles.list}>\n              {name} : {number}\n            </p>\n            <button\n              className={styles.button}\n              type=\"button\"\n              onClick={() =>\n                dispatch(deleteContact(id))\n                  .unwrap()\n                  .then(({ name, id }) => {\n                    alert(`${name} was deleted from contacts`);\n                  })\n                  .catch(rejectedValueOrSerializedError => {\n                    console.log(rejectedValueOrSerializedError);\n                  })\n              }\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nexport default ContactList;\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"name\":\"Filter_name__ZiNRr\",\"input\":\"Filter_input__N7T3z\"};","import styles from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const filterContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <>\n      <p className={styles.name}>Find contacts by name</p>\n      <input\n        className={styles.input}\n        type=\"text\"\n        name=\"filter\"\n        value={filterContacts}\n        onChange={e => dispatch(setFilter(e.target.value))}\n      />\n    </>\n  );\n}\n\nexport default Filter;","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nconst PhoneBook = () => {\n  return (\n    <div>\n      <br />\n      <ContactForm />\n      <br />\n      <Filter />\n      <br />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default PhoneBook;"],"names":["selectContacts","state","contacts","items","selectFilteredContacts","filter","selectIsLoading","isLoading","initialState","name","number","useState","setState","useSelector","contactId","nanoid","dispatch","useDispatch","handleChange","evt","target","value","prev","className","styles","onSubmit","preventDefault","newName","elements","find","item","toLowerCase","alert","addContact","htmlFor","onChange","type","id","pattern","title","required","Loader","height","width","color","ariaLabel","radius","wrapperStyle","wrapperClass","visible","filterState","useEffect","fetchContacts","sortedContacts","sort","a","b","localeCompare","filteredContacts","contact","includes","length","map","onClick","deleteContact","unwrap","then","catch","rejectedValueOrSerializedError","console","log","filterContacts","e","setFilter"],"sourceRoot":""}